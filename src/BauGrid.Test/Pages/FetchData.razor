@page "/fetchdata"

@using BauGrid.Test.Data
@using BauGrid.Test.Components
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <TableTemplate @ref="grdForecasts" Items="forecasts" HeaderClass="bg-light" Page="@_page" PageSize="@_pageSize" TotalRecords="@_totalRecords" OnChangePage="ChangePageAsync">
		<TableHeader>
			<th>Date</th>
			<th>Temp. (C)</th>
			<th>Temp. (F)</th>
			<th>Summary</th>
		</TableHeader>
		<RowTemplate Context="forecast">
			<td>@forecast.Date.ToShortDateString()</td>
			<td>@forecast.TemperatureC</td>
			<td>@forecast.TemperatureF</td>
			<td>@forecast.Summary</td>
		</RowTemplate>
    </TableTemplate>
}

@code {
	private TableTemplate<WeatherForecast> grdForecasts;
	private List<WeatherForecast> forecasts;
	private int _page = 1;
	private int _pageSize = 20;
	private int _totalRecords = 630;

	/// <summary>
	///		Cambia la página en el grid
	/// </summary>
	private async Task ChangePageAsync(TableTemplatePageEventArgs eventArgs)
	{
		forecasts = null;
		_page = eventArgs.NewPage;
		forecasts = await ForecastService.GetForecastAsync(DateTime.Now, _pageSize);
	}

	protected override async Task OnInitializedAsync()
	{
		forecasts = await ForecastService.GetForecastAsync(DateTime.Now, _pageSize);
	}
}
