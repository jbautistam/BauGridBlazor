@page "/fetchdataGridTable"

@using System.Linq 
@using BauGrid.Test.Data
@using BauGrid

@inject WeatherForecastService _forecastService

<div class="row">
	<GridTable Items="_forecasts" Context="wf" Page="@_page" PageSize="@_pageSize" TotalRecords="@_totalRecords" OnChangePage="ChangePageAsync">
		<Loading>
			<SpinnerComponent/>
		</Loading>
		<Header>
			<Column Field=@nameof(WeatherForecast.Date) Sortable=true DefaultSort=Column.SortMode.Ascending />
			<Column Field=@nameof(WeatherForecast.TemperatureC) Label="Temp. (C)" Sortable=true />
			<Column Field=@nameof(WeatherForecast.TemperatureF) Label="Temp. (F)" Sortable=true />
			<Column Field=@nameof(WeatherForecast.Summary) Filterable=true />
			<Column Field=@nameof(WeatherForecast.IsReal) Label="Real" />
		</Header>
		<Row>
			<Cell>@wf.Date.ToShortDateString()</Cell>
			<Cell Align=Column.Align.Right>@wf.TemperatureC</Cell>
			<Cell Align=Column.Align.Right>@wf.TemperatureF</Cell>
			<Cell Align=Column.Align.Center>@wf.Summary</Cell>
			<Cell Align=Column.Align.Center>
				<input type="checkbox" disabled readonly checked="@wf.IsReal"/> 
			</Cell>
		</Row>
	</GridTable>
</div>

@code {
	private IEnumerable<WeatherForecast> _forecasts;
	private List<WeatherForecast> _forecastsTotal;
	private int _page = 1;
	private int _pageSize = 20;
	private int _totalRecords = 630;

	/// <summary>
	///		Cambia la página en el grid
	/// </summary>
	private async Task ChangePageAsync(BauGrid.EventArguments.GridTablePageEventArgs eventArgs)
	{
		_forecasts = null;
		_page = eventArgs.NewPage;
		_forecasts = SortForecasts(_forecastsTotal, eventArgs.SortFields).Skip((_page - 1) * _pageSize).Take(_pageSize);
	}

	/// <summary>
	///		Ordena la lista de datos
	/// </summary>
	private IEnumerable<WeatherForecast> SortForecasts(IEnumerable<WeatherForecast> forecasts, List<(string key, Column.SortMode sort)> sortFields)
	{
		// Ordena la lista
		foreach ((string key, Column.SortMode sort) in sortFields)
			if (sort != Column.SortMode.NoSort)
			{
				if (key.Equals(nameof(WeatherForecast.Date), StringComparison.CurrentCultureIgnoreCase))
					forecasts = SortItems(forecasts, sort == Column.SortMode.Ascending, item => item.Date);
				if (key.Equals(nameof(WeatherForecast.TemperatureC), StringComparison.CurrentCultureIgnoreCase))
					forecasts = SortItems(forecasts, sort == Column.SortMode.Ascending, item => item.TemperatureC);
				if (key.Equals(nameof(WeatherForecast.TemperatureF), StringComparison.CurrentCultureIgnoreCase))
					forecasts = SortItems(forecasts, sort == Column.SortMode.Ascending, item => item.TemperatureF);
				if (key.Equals(nameof(WeatherForecast.Summary), StringComparison.CurrentCultureIgnoreCase))
					forecasts = SortItems(forecasts, sort == Column.SortMode.Ascending, item => item.Summary);
				if (key.Equals(nameof(WeatherForecast.IsReal), StringComparison.CurrentCultureIgnoreCase))
					forecasts = SortItems(forecasts, sort == Column.SortMode.Ascending, item => item.IsReal);
			}
		// Devuelve la lista ordenada
		return forecasts;
	}

	/// <summary>
	///		Ordena los elementos (debería ser un extensor pero esto no es más que un ejemplo)
	/// </summary>
	private IOrderedEnumerable<WeatherForecast> SortItems<TypeData>(IEnumerable<WeatherForecast> forecasts, bool ascending, Func<WeatherForecast, TypeData> keySelector)
	{
		if (forecasts is IOrderedEnumerable<WeatherForecast> ordered)
		{
			if (ascending)
				return ordered.ThenBy(keySelector);
			else
				return ordered.ThenByDescending(keySelector);
		}
		else
		{
			if (ascending)
				return forecasts.OrderBy(keySelector);
			else
				return forecasts.OrderByDescending(keySelector);
		}
	}

	protected override async Task OnInitializedAsync()
	{
		_forecastsTotal = await _forecastService.GetForecastAsync(DateTime.Now, _totalRecords);
		_forecasts = _forecastsTotal.Skip((_page - 1) * _pageSize).Take(_pageSize);
	}
}
